#usda 1.0
(
    defaultPrim = "base"
    framesPerSecond = 24
    metersPerUnit = 1
    timeCodesPerSecond = 24
)

class Material "base"
{
    float inputs:ao_intensity = 1
    float inputs:normal_scale = 1
    asset inputs:texture_arm = @@
    asset inputs:texture_basecolor = @@
    asset inputs:texture_normal = @@
    token outputs:mtlx:surface.connect = </base/materialx.outputs:out>

    def NodeGraph "materialx"
    {
        float inputs:ao_intensity = 1
        float inputs:ao_intensity.connect = </base.inputs:ao_intensity>
        float inputs:normal_scale = 1
        float inputs:normal_scale.connect = </base.inputs:normal_scale>
        token outputs:out.connect = </base/materialx/mtlx_standard_surface.outputs:out>

        def Shader "mtlx_standard_surface"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            float inputs:base (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double default_value = 1
                        string ogl_diff_intensity = "1"
                    }
                }
            )
            color3f inputs:base_color (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double3 default_value = (0.8, 0.8, 0.8)
                        string ogl_diff = "1"
                    }
                }
            )
            color3f inputs:base_color.connect = </base/materialx/mtlx_multiply_ao.outputs:out>
            float inputs:coat (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double default_value = 0
                        string ogl_coat_intensity = "1"
                    }
                }
            )
            float inputs:coat_roughness (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double default_value = 0.1
                        string ogl_coat_rough = "1"
                    }
                }
            )
            float inputs:emission (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double default_value = 0
                        string ogl_emit_intensity = "1"
                    }
                }
            )
            color3f inputs:emission_color (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double3 default_value = (1, 1, 1)
                        string ogl_emit = "1"
                    }
                }
            )
            float inputs:metalness (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double default_value = 0
                        string ogl_metallic = "1"
                    }
                }
            )
            float inputs:metalness.connect = </base/materialx/mtlx_sep_arm.outputs:outb>
            vector3f inputs:normal.connect = </base/materialx/mtlx_normalmap.outputs:out>
            float inputs:specular (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double default_value = 1
                        string ogl_spec_intensity = "1"
                    }
                }
            )
            color3f inputs:specular_color (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double3 default_value = (1, 1, 1)
                        string ogl_spec = "1"
                    }
                }
            )
            float inputs:specular_IOR (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double default_value = 1.5
                        string ogl_ior = "1"
                    }
                }
            )
            float inputs:specular_roughness (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double default_value = 0.2
                        string ogl_rough = "1"
                    }
                }
            )
            float inputs:specular_roughness.connect = </base/materialx/mtlx_sep_arm.outputs:outg>
            float inputs:transmission (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double default_value = 0
                        string ogl_transparency = "1"
                    }
                }
            )
            token outputs:out
        }

        def Shader "mtlx_multiply_ao"
        {
            uniform token info:id = "ND_multiply_color3FA"
            color3f inputs:in1.connect = </base/materialx/mtlx_image_basecolor.outputs:out>
            float inputs:in2.connect = </base/materialx/mtlx_oneminus2.outputs:out>
            color3f outputs:out
        }

        def Shader "mtlx_image_basecolor"
        {
            uniform token info:id = "ND_image_color3"
            color3f inputs:default = (1, 0, 1)
            asset inputs:file.connect = </base.inputs:texture_basecolor>
            color3f outputs:out
        }

        def Shader "mtlx_oneminus2"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1 = 1
            float inputs:in2.connect = </base/materialx/mtlxmultiply1.outputs:out>
            float outputs:out
        }

        def Shader "mtlxmultiply1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </base/materialx.inputs:ao_intensity>
            float inputs:in2.connect = </base/materialx/mtlx_oneminus1.outputs:out>
            float outputs:out
        }

        def Shader "mtlx_oneminus1"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1 = 1
            float inputs:in2.connect = </base/materialx/mtlx_sep_arm.outputs:outr>
            float outputs:out
        }

        def Shader "mtlx_sep_arm"
        {
            uniform token info:id = "ND_separate3_color3"
            color3f inputs:in.connect = </base/materialx/mtlx_image_arm.outputs:out>
            float outputs:outb
            float outputs:outg
            float outputs:outr
        }

        def Shader "mtlx_image_arm"
        {
            uniform token info:id = "ND_image_color3"
            color3f inputs:default = (1, 0.2, 0)
            asset inputs:file.connect = </base.inputs:texture_arm>
            color3f outputs:out
        }

        def Shader "mtlx_normalmap"
        {
            uniform token info:id = "ND_normalmap"
            vector3f inputs:in.connect = </base/materialx/mtlx_image_normal.outputs:out>
            float inputs:scale.connect = </base/materialx.inputs:normal_scale>
            vector3f outputs:out
        }

        def Shader "mtlx_image_normal"
        {
            uniform token info:id = "ND_image_vector3"
            vector3f inputs:default = (0.5, 0.5, 1)
            asset inputs:file.connect = </base.inputs:texture_normal>
            vector3f outputs:out
        }
    }
}

